1. Instalirajte novi Laravel projekt koristeći Composer
Ako nemate instaliran Composer, instalirajte ga pomoću sljedeće poveznice
https://getcomposer.org/download/
laravel new projekt
podesiti .env

2. Definirajte GET rutu za dohvat životinje prema nazivu te POST rutu za spremanje nove
životinje.
-- kreiramo model Animal sa factorijem, controllerom i seederom
php artisan make:model
-- napravimo migraciju
php artisan make:migration create_animals_table
Schema::create('animals', function (Blueprint $table) {
            $table->id();
            $table->string('naziv');
            $table->timestamps();
        });
-- pokrenemo migracije
php artisan migrate --seed
-- napravimo metodu getAnimal u AnimalControlleru

public function getAnimal ($name) {
        $animal = Animal::where('naziv', $name)->first();

        if (!$animal) {
            return response()->json(['message' => 'Nema takve životinje'], 404);
        }

        return response()->json($animal);
    }
-- napravimo store metodu
public function store(Request $request)
    {
        $validated = $request->validate([
            'naziv' => 'required|string|max:255'
        ]);

        $animal = Animal::create($validated);

        return response()->json(['message' => 'Nova životinja spremljena', 'animal' => $animal], 201);
    }
-- moramo dodati naziv u fillable u animal modelu
protected $fillable = ['naziv'];
3. Stavite rute u middleware grupu “auth:admin”"

<?php

use App\Http\Controllers\AnimalController;
use App\Http\Controllers\CarController;
use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return view('welcome');
});


Route::middleware(['auth.admin'])->group(
    function () {
        Route::get('/animal/{name}', [AnimalController::class, 'getAnimal']);
        Route::post('/animal', [AnimalController::class, 'store']);
        Route::resource('/cars', CarController::class);
        Route::get('/admin/dashboard', function () {
            return 'Dobrodošli na admin dashboard!';
        });
    }
);

4. Kreirajte i definirajte resursni kontroler za automobile. Kreirajte kontroler koji definira sve
rute koje dolaze s resursnim kontrolerom.

php artisan make:controller --resource CarController

5. Unutar store metode postojećeg kontrolera napišite funkciju koja obrađuje POST HTTP
zahtjev.
6. Funkcija treba prihvatiti zahtjev koji sadrži polje za “naziv”. Provjerite jesu li sva polja
ispunjena i vratite odgovarajuću poruku u JSON formatu. Ako su sva polja ispunjena,
vratite statusni kod 200 i poruku ""Zahtjev uspješan"". Ako bilo koje polje nedostaje,
vratite statusni kod 400 i poruku ""Nedostaju podaci""."

public function store(Request $request)
    {
        try {
            $validated = $request->validate([
                'naziv' => 'required|string|30'
            ]);

            return response()->json([
                'message' => "Zahtjev uspješan"
            ], 200);
        } catch (ValidationException $e) {
            return response()->json([
                'message' => "Nedostaju podaci"
            ], 400);
        }
    }
    
7. Kreirajte middleware u Laravelu koji provjerava je li korisnik autentificiran prije pristupa
proizvoljnoj ruti.
php artisan make:middleware ProvjeriToken
-- dajmo mu alias u /bootstrap/app.php
-- obavezno dodati na vrh
use App\Http\Middleware\ProvjeriToken;
->withMiddleware(function (Middleware $middleware) {
        $middleware->alias([
            'auth.admin' => ProvjeriToken::class
        ]);
    })
-- u middleware
public function handle(Request $request, Closure $next): Response
    {
        $token = $request->header('X-Authorization');
                if ($token !== 'TestValue') {
                    return redirect('/');
                }
        return $next($request);
    }
-- također kreiramo middleware koji dodaje test header na sve zahtjeve
php artisan make:middleware DodajTestHeader
-- u middleware
public function handle(Request $request, Closure $next): Response
    {
        if (!$request->hasHeader('X-Authorization')) {
            $request->headers->set('X-Authorization', 'TestValue');
        }
        return $next($request);
    }
-- u welcome blade za testiranje dodamo formu
<p>Dodaj životinju:</p>
            <form action="/animal" method="POST" id="animal-form">
                @csrf
                <label for="naziv">Životinja</label>
                <input type="text" name="naziv" />
                <input type="submit" value="Pošalji" id="submit-button">
            </form>
<script>

8. Provjera pristupa se radi tako da se u Headeru zahtjeva mora poslati proizvoljan token.

9. Ako korisnik nije autentificiran, middleware treba preusmjeriti korisnika na početnu
stranicu.
10. Nakon toga, primijenite ovaj middleware na grupu ruta koje trebaju biti dostupne samo
autentificiranim korisnicima.
11. Kreirajte feature test koji provjerava da se za proizvoljnu rutu kontrolera dobije 200
(primjer za rutu [GET] /animals). U sklopu testa treba napraviti User factory koji će
kreirati korisnika koji će napraviti zahtjev.

php artisan make:test RouteTest

<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\User;

class RouteTest extends TestCase
{
     /**
     * A basic feature test example.
     */
    public function test_example(): void
    {
        $user = User::factory()->create();
        $response = $this->withHeaders([
            'X-Authorization' => 'TestValue',
        ])->get('/animal/pas');

        $response->assertStatus(200);
    }
}
-- testiranje (mora postojati pas u bazi da bi vratilo 200)

php artisan test --filter=RouteTest

zip -r projekt.zip zadatak -x "projekt/vendor/*"
