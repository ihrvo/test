1. Instalirajte novi Laravel projekt koristeći Composer
Ako nemate instaliran Composer, instalirajte ga pomoću sljedeće poveznice https://getcomposer.org/download/
laravel new zadatak
-- podesimo .env
php artisan migrate --seed
php artisan make:migration
create_animal_table
php artisan make:model
Animal
-- odaberemo i controller, seeder i factory
u modelu dodamo novu metodu npr. getAnimal
public function getAnimal($name) {}

2. Definirajte GET rutu za dohvat životinje prema nazivu te POST rutu za spremanje nove
životinje.
Route::get('/animal/{name}', [AnimalController::class, 'getAnimal']);
Route::post('/animal', [AnimalController::class, 'store']);

3. Stavite rute u middleware grupu “auth:admin”"
-- kreiramo middleware
php artisan make:middleware ProvjeriToken
--   INFO  Middleware [app/Http/Middleware/ProvjeriToken.php] created successfully.
-- middlewareu dodamo alias 'auth.admin'
-- u bootstrap/app.php dodamo:
->withMiddleware(function (Middleware $middleware) {
        $middleware->alias([
            'auth.admin' => ProvjeriToken::class
        ]);
    })

Route::middleware(['auth.admin'])->group(
    function () {
        Route::get('/animal/{name}', [AnimalController::class, 'getAnimal']);
        Route::post('/animal', [AnimalController::class, 'store']);
    }
);


4. Kreirajte i definirajte resursni kontroler za automobile. Kreirajte kontroler koji definira sve
rute koje dolaze s resursnim kontrolerom.

php artisan make:controller CarController --resource

5. Unutar store metode postojećeg kontrolera napišite funkciju koja obrađuje POST HTTP
zahtjev.

6. Funkcija treba prihvatiti zahtjev koji sadrži polje za “naziv”. Provjerite jesu li sva polja
ispunjena i vratite odgovarajuću poruku u JSON formatu. Ako su sva polja ispunjena,
vratite statusni kod 200 i poruku ""Zahtjev uspješan"". Ako bilo koje polje nedostaje,
vratite statusni kod 400 i poruku ""Nedostaju podaci""."

use Illuminate\Validation\ValidationException;

public function store(Request $request)
    {
        try {
            $validated = $request->validate([
                'naziv' => 'required|string|30'
            ]);

            return response()->json([
                'message' => "Zahtjev uspješan"
            ], 200);
        } catch (ValidationException $e) {
            return response()->json([
                'message' => "Nedostaju podaci"
            ], 400);
        }
    }

7. Kreirajte middleware u Laravelu koji provjerava je li korisnik autentificiran prije pristupa
proizvoljnoj ruti.
-- middleware smo već kreirali
-- dodajemo u njega:
class ProvjeriToken
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        $token = $request->header('Authorization');
        
        if ($token !== 'tajni_token') {
            return redirect('/');  
        }   
        return $next($request);
    }
}

8. Provjera pristupa se radi tako da se u Headeru zahtjeva mora poslati proizvoljan token.
-- ovo možemo testirati tako da u welcome blade dodamo formu koja se koristi za Animal store rutu
-- i pomoću js dodamo header (u ovom slučaju Authorization : tajni_token
<p>Dodaj životinju:</p>
  <form action="/animal" method="POST" id="animal-form">
      @csrf
      <label for="name">Životinja</label>
      <input type="text" name="name" />
      <input type="submit" value="Pošalji" id="submit-button">
  </form>

<script>
document.getElementById('submit-button').addEventListener('click', function () {
    const form = document.getElementById('animal-form');
    const formData = new FormData(form);

    fetch('/animal', {
        method: 'POST',
        headers: {
            'Authorization': 'tajni_token',
            'X-CSRF-TOKEN': document.querySelector('input[name="_token"]').value,
        },
        body: formData,
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        } else {
            throw new Error('Greška: ' + response.status);
        }
    })
    .then(data => {
        console.log('Uspješno:', data);
    })
    .catch(error => {
        console.error('Greška:', error);
    });
});
</script>


9. Ako korisnik nije autentificiran, middleware treba preusmjeriti korisnika na početnu
stranicu.
10. Nakon toga, primijenite ovaj middleware na grupu ruta koje trebaju biti dostupne samo
autentificiranim korisnicima.
11. Kreirajte feature test koji provjerava da se za proizvoljnu rutu kontrolera dobije 200
(primjer za rutu [GET] /animals). U sklopu testa treba napraviti User factory koji će
kreirati korisnika koji će napraviti zahtjev.
